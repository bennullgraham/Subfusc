-extends 'layout/base.haml'

-block content
    %section.stack
        %h1 << Stack
        %p
            %img class="seven columns omega right" \
                src="/static/img/content/stack.png" \
                alt="Diagram showing the software stack for this site" \
                title="Stack"
            This site is cached by <a href="https://www.varnish-cache.org/">varnish</a>. Behind varnish, <a href="http://nginx.org/">nginx</a> either serves static files directly or hands off application requests to <a href="http://www.gevent.org/">gevent</a>. gevent serves a lightweight Python application written in the <a href="http://flask.pocoo.org/">Flask</a> web framework. gevent is monitored by <a href="http://supervisord.org/">Supervisor</a>.
    %p
        <a href="http://elsdoerfer.name/docs/flask-assets/">Flask-Assets</a> is employed to bundle and filter CSS and Javascript source files. Javascript is run through <a href="http://opensource.perlig.de/rjsmin/">rJsmin</a>, and CSS through <a href="https://github.com/Kronuz/pyScss/">pyScss</a>, a Python implementation of the compiler for the SCSS variant of <a href="http://sass-lang.com/">Sass</a>. All Javascript source is loaded asynchronously with a variant of <a href="http://www.dustindiaz.com/scriptjs/">$script.js</a>, with the exception of one or two small inline snippets (one of which is, obviously, the asynchronous loader itself).
    
    %section.performance
        %h1 << Performance
        %p
            Ignoring transport-layer delays, the stack employed allows thousands of requests per second with response times in the tens of milliseconds, whilst allowing the full flexibility that scripted language stacks provide. These figures were obtained with:
        %div.syntax-wrap -> %pre.brush:.bash.syntax
            |$ sudo httperf --hog --server=bgraham.com.au --uri=/ --num-conns=5000 --rate=2500 --num-calls=3
        %p
            %img class="six columns alpha left" \
                src="/static/img/content/network-timeline.png" \
                alt="Chart of resource load times for this website" \
                title="Network timeline"
            While the server may respond incredibly quickly to requests, the majority of delay from a user perspective is caused by the network round-trip time - i.e., the time it takes for a request to physically traverse the Internet. The order and loading of resources has been optimised to lower these delays to the absolute minimum. The chart alongside shows the network timeline for a request made in Melbourne, Australia to the server hosting this site - an EC2 instance in Tokyo, Japan. The blue vertical line represents the <a href="http://dev.w3.org/html5/spec/section-index.html#events-0">DOMContentLoaded</a> event, which, roughly speaking, is when the page begins to display. The bare minimum of resources are requested before allowing this event to occur, meaning the delay is approximately double the network round-trip time. This is essentially the best attainable delay for a web page. Other resources are then requested, and the page is 'finished' at the red vertical line. 

    %section.design
        %h1 << Design
        %p
            The design employed here is understated and emphasises readability - I hope. There are clear vertical lines for the eye to follow (note that all text abutts a single left rule), while horizontal spacing respects <a href="http://lamb.cc/typograph/">a certain rhythm</a>. Content is also readable on mobile or small-display devices without serving a different design - try resizing your browser window. The content will adjust gracefully all the way down to "mobile portrait" format, thanks to 
            %a href="http://www.getskeleton.com/"
                Skeleton
    
    %section.deploy
        %h1 << Deployment
        %p
            Development changes are pushed to a bare repository on the production server:
        %div.syntax-wrap -> %pre.brush:.bash.syntax
            |$ git push live
        %p
            In that repository, a post-receive hook pushes to the directory the site is served from:
        %div.syntax-wrap -> %pre.brush:.bash.syntax
            |# hooks/post-receive:
            |#!/bin/sh
            |GIT_WORK_TREE=/var/www/subfusc/ git checkout -f
        %p
            This deployment method is very lightweight. Site customisation derives from the application loading config defaults but allowing an environment variable which specifies overrides in a local config file:

        %div.syntax-wrap -> %pre.brush:.python.syntax
            |app = Flask(__name__)
            |app.config.from_object('default-config')
            |if os.environ.get('SUBFUSC_SETTINGS'):
            |   app.config.from_envvar('SUBFUSC_SETTINGS')
    %p
        <code>default-config.py</code> contains configs appropriate for production. <code>SUBFUSC_SETTINGS</code> is actually used to tailor the site for a development environment, e.g.:
    %div.four.columns.alpha
        %div.syntax-wrap -> %pre.brush:.python.syntax
            |# site-config.py
            |DEBUG = True
    %div.one.columns
        &nbsp;
    %div.nine.columns.omega
        %div.syntax-wrap -> %pre.brush:.python.syntax
            |$ export SUBFUSC_SETTINGS="$(pwd)/site-config.py"
            |$ python Subfusc.py</pre></div></div>
